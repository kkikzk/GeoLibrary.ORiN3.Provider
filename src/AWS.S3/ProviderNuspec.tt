<#@ template language="C#" hostspecific="true" #>
<#@ output extension=".nuspec" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Text.Json" #>
<#@ assembly name="System.Memory" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.Json" #>
<#@ import namespace="System.Text.Json.Nodes" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#
/*
var configPath = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), ".orin3providerconfig");
if (!File.Exists(configPath))
{
    throw new FileNotFoundException("Provider config JSON not found", configPath);
}

var json = File.ReadAllText(configPath);
var root = JsonNode.Parse(json)?.AsObject() ?? throw new InvalidOperationException("Invalid JSON");
string providerFile = Path.GetFileName(root["providerPath"]?.GetValue<string>() ?? string.Empty);

string id = root["providerName"]?.GetValue<string>() ?? throw new InvalidOperationException("providerName not found");
string version = root["version"]?.GetValue<string>() ?? throw new InvalidOperationException("version not found");
string authors = root.TryGetPropertyValue("author", out var authNode) ? authNode.GetValue<string>() : "GeoLibrary";

string description = root.TryGetPropertyValue("comment", out var comNode) && comNode is JsonObject comObj && comObj.TryGetPropertyValue("default", out var defCom)
    ? defCom.GetValue<string>()
    : id;
string licenseUrl = root.TryGetPropertyValue("license", out var licNode) && licNode is JsonObject licObj && licObj.TryGetPropertyValue("default", out var defLic)
    ? defLic.GetValue<string>()
    : string.Empty;
string projectUrl = root.TryGetPropertyValue("manual", out var manNode) && manNode is JsonObject manObj && manObj.TryGetPropertyValue("default", out var defMan)
    ? defMan.GetValue<string>()
    : string.Empty;
*/

var projFile = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), "..", "..", "SolutionDefines.targets");
if (!File.Exists(projFile))
{
    throw new FileNotFoundException("Project file not found", projFile);
}

var projDoc = XDocument.Load(projFile);
XNamespace ns = projDoc.Root.Name.Namespace;
var versionElement = projDoc.Descendants(ns + "DotNetVersion").FirstOrDefault();
if (versionElement == null)
{
    throw new InvalidOperationException("DotNetVersion element not found in project file");
}

var dotNetVersion = versionElement.Value;
#>
<?xml version="1.0"?>
<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
  <metadata>
    <id>GeoLibrary.ORiN3.Provider.AWS.S3</id>
    <version>0.0.1</version>
    <title>GeoLibrary.ORiN3.Provider.AWS.S3</title>
    <authors>KAKEI Kazuki</authors>
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <license type="file">LICENSE.txt</license>
    <readme>Readme.md</readme>
    <description>GeoLibrary.ORiN3.Provider.AWS.S3 is a ORiN3 provider that writes/reads data to/from AWS S3.</description>
    <copyright>© 2025 KAKEI Kazuki</copyright>
    <tags>ORiN3 ORiN3SDK AWS S3 ORiN3:FD9A4E36-A886-46F1-986C-64EFF92D16E8 ProviderID:EBD91922-184D-4ECD-A7D8-3082DC617847</tags>
    <dependencies>
      <group targetFramework="<#= versionElement.Value #>" />
    </dependencies>
    <icon>128x128.png</icon>
    <releaseNotes>
        
    </releaseNotes>
    <projectUrl>https://github.com/kkikzk/GeoLibrary.ORiN3.Provider</projectUrl>
    <repository type="git" url="https://github.com/kkikzk/GeoLibrary.ORiN3.Provider.git" />
  </metadata>
  <files>
    <file src="bin\Release\" target="lib\"/>
    <file src="..\..\icon\128x128.png" target="" />
    <file src="LICENSE.txt" target=""/>
    <file src="Readme.md" target=""/>
  </files>
</package>
