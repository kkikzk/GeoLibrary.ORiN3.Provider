using Azure;
using Azure.Storage.Files.Shares.Models;
using Design.ORiN3.Common.V1.AutoGenerated;
using Design.ORiN3.Provider.V1;
using GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File;
using GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.Interface;
using GeoLibrary.ORiN3.Provider.Azure.Storage.Test.Mock;
using GeoLibrary.ORiN3.Provider.TestBaseLib;
using Message.Client.ORiN3.Provider;
using Xunit.Abstractions;

namespace GeoLibrary.ORiN3.Provider.Azure.Storage.Test.O3Object.File;

public class AzureFileTest : IClassFixture<ProviderTestFixture<AzureFileTest>>, IDisposable
{
    private readonly ITestOutputHelper _output;
    private readonly ProviderTestFixture<AzureFileTest> _fixture;
    private readonly CancellationTokenSource _tokenSource = new(10000);

    public AzureFileTest(ProviderTestFixture<AzureFileTest> fixture, ITestOutputHelper output)
    {
        _fixture = fixture;
        _output = output;
        _fixture.InitAsync<AzureRootObjectForTest>(_output, _tokenSource.Token).Wait();
    }

    public void Dispose()
    {
        try
        {
            _tokenSource.Dispose();
        }
        catch
        {
            // do nothing
        }
        GC.SuppressFinalize(this);
    }

    [Theory]
    [Trait("Category", nameof(AzureFile))]
    [InlineData("shareName", "hoge.txt")]
    [InlineData("shareName2", "fuga.txt")]
    public async Task FileOptionTest(string shareName, string fileName)
    {
        // arrange
        using var cts = new CancellationTokenSource(10000);
        var actualConnectionString = string.Empty;
        var actualShareName = string.Empty;
        var actualFileName = string.Empty;
        using var methodReverter = ShareClientEx.SetCreateMethod((connectionString, shareName) =>
        {
            actualConnectionString = connectionString;
            actualShareName = shareName;
            return new ShareClientMock(connectionString, shareName)
            {
                GetRootDirectoryClientMock = () =>
                {
                    return new ShareDirectoryClientMock(string.Empty)
                    {
                        GetFileClientMock = (fileName) =>
                        {
                            actualFileName = fileName;
                            return new ShareFileClientMock(fileName);
                        }
                    };
                },
            };
        });
        var controller = await _fixture.Root.CreateControllerAsync(
            name: "AzureFileStorageController",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.Controller.FileStorageController, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"0.0.1\",\"Account Name\":\"iotsolution1\",\"Account Key\":\"YMktKCsVW7tZrnFKLqFRD8MRICu3hNXxaNTB9Ejr/XyTnM30Eimpy6JvHDNWubcj\",\"Use Https\":true,\"Endpoint Suffix\":\"core.windows.net\"}",
            token: cts.Token);

        // act
        var sut = await controller.CreateFileAsync(
            name: "AzureFile",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.AzureFile, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"0.0.1\",\"Share Name\":\"" + shareName + "\",\"File Name\":\"" + fileName + "\"}",
            token: cts.Token);
        await sut.OpenAsync(cts.Token);

        // assert
        Assert.Equal(shareName, actualShareName);
        Assert.Equal(fileName, actualFileName);
        Assert.Equal("DefaultEndpointsProtocol=https;AccountName=iotsolution1;AccountKey=testKey;EndpointSuffix=core.windows.net", actualConnectionString);

        await sut.CloseAsync(cts.Token);
        await sut.DeleteAsync(cts.Token);
        await controller.DeleteAsync(cts.Token);
    }

    [Fact]
    [Trait("Category", nameof(AzureFile))]
    public async Task FileInvalidShareNameOptionTest()
    {
        // arrange
        using var cts = new CancellationTokenSource(10000);
        var actualConnectionString = string.Empty;
        var actualcontainerName = string.Empty;
        var actualBlobkBlobPath = string.Empty;
        var actualAppendBlobPath = string.Empty;
        var controller = await _fixture.Root.CreateControllerAsync(
            name: "AzureFileStorageController",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.Controller.FileStorageController, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"0.0.1\",\"Account Name\":\"iotsolution1\",\"Account Key\":\"YMktKCsVW7tZrnFKLqFRD8MRICu3hNXxaNTB9Ejr/XyTnM30Eimpy6JvHDNWubcj\",\"Use Https\":true,\"Endpoint Suffix\":\"core.windows.net\"}",
            token: cts.Token);

        // act
        var ex = await Assert.ThrowsAsync<ProviderClientException>(async () =>
        {
            _ = await controller.CreateFileAsync(
                name: "AzureFile",
                typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.AzureFile, GeoLibrary.ORiN3.Provider.Azure.Storage",
                option: "{\"@Version\":\"0.0.1\",\"File Name\":\"hoge.txt\"}",
                token: cts.Token);
        });

        // assert
        Assert.Equal((int)ResultCode.JsonElementNotFound, (int)ex.ResultCode);
        Assert.Contains("Share Name", ex.Message);

        await controller.DeleteAsync(cts.Token);
    }

    [Fact]
    [Trait("Category", nameof(AzureFile))]
    public async Task FileInvalidFileNameOptionTest()
    {
        // arrange
        using var cts = new CancellationTokenSource(10000);
        var actualConnectionString = string.Empty;
        var actualcontainerName = string.Empty;
        var actualBlobkBlobPath = string.Empty;
        var actualAppendBlobPath = string.Empty;
        var controller = await _fixture.Root.CreateControllerAsync(
            name: "AzureFileStorageController",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.Controller.FileStorageController, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"0.0.1\",\"Account Name\":\"iotsolution1\",\"Account Key\":\"YMktKCsVW7tZrnFKLqFRD8MRICu3hNXxaNTB9Ejr/XyTnM30Eimpy6JvHDNWubcj\",\"Use Https\":true,\"Endpoint Suffix\":\"core.windows.net\"}",
            token: cts.Token);

        // act
        var ex = await Assert.ThrowsAsync<ProviderClientException>(async () =>
        {
            _ = await controller.CreateFileAsync(
                name: "AzureFile",
                typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.AzureFile, GeoLibrary.ORiN3.Provider.Azure.Storage",
                option: "{\"@Version\":\"0.0.1\",\"Share Name\":\"share\"}",
                token: cts.Token);
        });

        // assert
        Assert.Equal((int)ResultCode.JsonElementNotFound, (int)ex.ResultCode);
        Assert.Contains("File Name", ex.Message);

        await controller.DeleteAsync(cts.Token);
    }

    [Fact]
    [Trait("Category", nameof(AzureFile))]
    public async Task FileNotFoundTest()
    {
        // arrange
        var fileName = "hoge.txt";
        using var cts = new CancellationTokenSource(10000);
        using var methodReverter = ShareClientEx.SetCreateMethod((connectionString, containerName) =>
        {
            return new ShareClientMock(connectionString, containerName)
            {
                GetRootDirectoryClientMock = () =>
                {
                    return new ShareDirectoryClientMock(string.Empty)
                    {
                        GetFileClientMock = (fileName) =>
                        {
                            return new ShareFileClientMock(fileName)
                            {
                                ExistsAsyncMock = (_) =>
                                {
                                    return Task.FromResult(Response.FromValue(false, null!));
                                }
                            };
                        },
                    };
                }
            };
        });
        var controller = await _fixture.Root.CreateControllerAsync(
            name: "AzureFileStorageController",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.Controller.FileStorageController, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"0.0.1\",\"Account Name\":\"iotsolution1\",\"Account Key\":\"YMktKCsVW7tZrnFKLqFRD8MRICu3hNXxaNTB9Ejr/XyTnM30Eimpy6JvHDNWubcj\",\"Use Https\":true,\"Endpoint Suffix\":\"core.windows.net\"}",
            token: cts.Token);
        var sut = await controller.CreateFileAsync(
            name: "AzureFile",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.AzureFile, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"0.0.1\",\"Share Name\":\"shareName\",\"File Name\":\"" + fileName + "\"}",
            token: cts.Token);

        // act
        var ex = await Assert.ThrowsAsync<ProviderClientException>(async () =>
        {
            await sut.OpenAsync(cts.Token);
        });

        // assert
        Assert.Equal((int)AzureStorageProviderResultCode.BlobNotFound, (int)ex.ResultCode);
        Assert.Contains(fileName, ex.Message);

        await sut.CloseAsync(cts.Token);
        await sut.DeleteAsync(cts.Token);
        await controller.DeleteAsync(cts.Token);
    }

    [Fact]
    [Trait("Category", nameof(AzureFile))]
    public async Task FileOptionCreateIfNotExistsTest()
    {
        // arrange
        using var cts = new CancellationTokenSource(10000);
        var actualLength = 0L;
        using var methodReverter = ShareClientEx.SetCreateMethod((connectionString, containerName) =>
        {
            return new ShareClientMock(connectionString, containerName)
            {
                GetRootDirectoryClientMock = () =>
                {
                    return new ShareDirectoryClientMock(string.Empty)
                    {
                        GetFileClientMock = (fileName) =>
                        {
                            return new ShareFileClientMock(fileName)
                            {
                                ExistsAsyncMock = (_) =>
                                {
                                    return Task.FromResult(Response.FromValue(false, null!));
                                },
                                CreateAsyncMock = (maxSize, conditions, token) =>
                                {
                                    actualLength = maxSize;
                                    var info = FilesModelFactory.StorageFileInfo();
                                    return Task.FromResult(Response.FromValue(info, null!));
                                }
                            };
                        },
                    };
                }
            };
        });
        var controller = await _fixture.Root.CreateControllerAsync(
            name: "AzureFileStorageController",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.Controller.FileStorageController, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"0.0.1\",\"Account Name\":\"iotsolution1\",\"Account Key\":\"YMktKCsVW7tZrnFKLqFRD8MRICu3hNXxaNTB9Ejr/XyTnM30Eimpy6JvHDNWubcj\",\"Use Https\":true,\"Endpoint Suffix\":\"core.windows.net\"}",
            token: cts.Token);

        // act
        var sut = await controller.CreateFileAsync(
            name: "AzureFile",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.AzureFile, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"0.0.1\",\"Share Name\":\"shareName\",\"File Name\":\"hoge.txt\",\"Create New If Not Exists\":true,\"Length\":100}",
            token: cts.Token);
        await sut.OpenAsync(cts.Token);

        // assert
        Assert.Equal(100L, actualLength);

        await sut.CloseAsync(cts.Token);
        await sut.DeleteAsync(cts.Token);
        await controller.DeleteAsync(cts.Token);
    }

    [Fact]
    [Trait("Category", nameof(AzureFile))]
    public async Task FileOptionCreateIfNotExistsErrorTest()
    {
        // arrange
        using var cts = new CancellationTokenSource(10000);
        var called = false;
        using var methodReverter = ShareClientEx.SetCreateMethod((connectionString, containerName) =>
        {
            return new ShareClientMock(connectionString, containerName)
            {
                GetRootDirectoryClientMock = () =>
                {
                    return new ShareDirectoryClientMock(string.Empty)
                    {
                        GetFileClientMock = (fileName) =>
                        {
                            return new ShareFileClientMock(fileName)
                            {
                                ExistsAsyncMock = (_) =>
                                {
                                    return Task.FromResult(Response.FromValue(true, null!));
                                },
                                CreateAsyncMock = (maxSize, conditions, token) =>
                                {
                                    called = true;
                                    throw new Exception();
                                }
                            };
                        },
                    };
                }
            };
        });
        var controller = await _fixture.Root.CreateControllerAsync(
            name: "AzureFileStorageController",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.Controller.FileStorageController, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"0.0.1\",\"Account Name\":\"iotsolution1\",\"Account Key\":\"YMktKCsVW7tZrnFKLqFRD8MRICu3hNXxaNTB9Ejr/XyTnM30Eimpy6JvHDNWubcj\",\"Use Https\":true,\"Endpoint Suffix\":\"core.windows.net\"}",
            token: cts.Token);

        // act
        var sut = await controller.CreateFileAsync(
            name: "AzureFile",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.AzureFile, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"0.0.1\",\"Share Name\":\"shareName\",\"File Name\":\"hoge.txt\",\"Create New If Not Exists\":true,\"Length\":100}",
            token: cts.Token);
        await sut.OpenAsync(cts.Token);

        // assert
        Assert.False(called);

        await sut.CloseAsync(cts.Token);
        await sut.DeleteAsync(cts.Token);
        await controller.DeleteAsync(cts.Token);
    }

    [Fact]
    [Trait("Category", nameof(AzureFile))]
    public async Task FileOptionCreateIfNotExistsErrorTest2()
    {
        // arrange
        using var cts = new CancellationTokenSource(10000);
        var called = false;
        using var methodReverter = ShareClientEx.SetCreateMethod((connectionString, containerName) =>
        {
            return new ShareClientMock(connectionString, containerName)
            {
                GetRootDirectoryClientMock = () =>
                {
                    return new ShareDirectoryClientMock(string.Empty)
                    {
                        GetFileClientMock = (fileName) =>
                        {
                            return new ShareFileClientMock(fileName)
                            {
                                ExistsAsyncMock = (_) =>
                                {
                                    return Task.FromResult(Response.FromValue(false, null!));
                                },
                                CreateAsyncMock = (maxSize, conditions, token) =>
                                {
                                    called = true;
                                    throw new Exception();
                                }
                            };
                        },
                    };
                }
            };
        });
        var controller = await _fixture.Root.CreateControllerAsync(
            name: "AzureFileStorageController",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.Controller.FileStorageController, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"0.0.1\",\"Account Name\":\"iotsolution1\",\"Account Key\":\"YMktKCsVW7tZrnFKLqFRD8MRICu3hNXxaNTB9Ejr/XyTnM30Eimpy6JvHDNWubcj\",\"Use Https\":true,\"Endpoint Suffix\":\"core.windows.net\"}",
            token: cts.Token);

        // act
        var sut = await controller.CreateFileAsync(
            name: "AzureFile",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.AzureFile, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"0.0.1\",\"Share Name\":\"shareName\",\"File Name\":\"hoge.txt\",\"Create New If Not Exists\":false,\"Length\":100}",
            token: cts.Token);

        // assert
        var exception = await Assert.ThrowsAsync<ProviderClientException>(async () =>
        {
            await sut.OpenAsync(cts.Token);
        });
        Assert.False(called);

        await sut.CloseAsync(cts.Token);
        await sut.DeleteAsync(cts.Token);
        await controller.DeleteAsync(cts.Token);
    }

    [Fact]
    [Trait("Category", nameof(AzureFile))]
    public async Task FileOptionCreateIfNotExistsErrorTest3()
    {
        // arrange
        using var cts = new CancellationTokenSource(10000);
        var called = false;
        using var methodReverter = ShareClientEx.SetCreateMethod((connectionString, containerName) =>
        {
            return new ShareClientMock(connectionString, containerName)
            {
                GetRootDirectoryClientMock = () =>
                {
                    return new ShareDirectoryClientMock(string.Empty)
                    {
                        GetFileClientMock = (fileName) =>
                        {
                            return new ShareFileClientMock(fileName)
                            {
                                ExistsAsyncMock = (_) =>
                                {
                                    return Task.FromResult(Response.FromValue(false, null!));
                                },
                                CreateAsyncMock = (maxSize, conditions, token) =>
                                {
                                    called = true;
                                    throw new Exception();
                                }
                            };
                        },
                    };
                }
            };
        });
        var controller = await _fixture.Root.CreateControllerAsync(
            name: "AzureFileStorageController",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.Controller.FileStorageController, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"0.0.1\",\"Account Name\":\"iotsolution1\",\"Account Key\":\"YMktKCsVW7tZrnFKLqFRD8MRICu3hNXxaNTB9Ejr/XyTnM30Eimpy6JvHDNWubcj\",\"Use Https\":true,\"Endpoint Suffix\":\"core.windows.net\"}",
            token: cts.Token);

        // act
        var sut = await controller.CreateFileAsync(
            name: "AzureFile",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.AzureFile, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"0.0.1\",\"Share Name\":\"shareName\",\"File Name\":\"hoge.txt\",\"Create New If Not Exists\":true}",
            token: cts.Token);

        // assert
        var exception = await Assert.ThrowsAsync<ProviderClientException>(async () =>
        {
            await sut.OpenAsync(cts.Token);
        });
        Assert.False(called);

        await sut.CloseAsync(cts.Token);
        await sut.DeleteAsync(cts.Token);
        await controller.DeleteAsync(cts.Token);
    }

    [Fact]
    [Trait("Category", nameof(AzureFile))]
    public async Task FileOptionCreateIfNotExistsErrorTest4()
    {
        // arrange
        using var cts = new CancellationTokenSource(10000);
        var called = false;
        using var methodReverter = ShareClientEx.SetCreateMethod((connectionString, containerName) =>
        {
            return new ShareClientMock(connectionString, containerName)
            {
                GetRootDirectoryClientMock = () =>
                {
                    return new ShareDirectoryClientMock(string.Empty)
                    {
                        GetFileClientMock = (fileName) =>
                        {
                            return new ShareFileClientMock(fileName)
                            {
                                ExistsAsyncMock = (_) =>
                                {
                                    return Task.FromResult(Response.FromValue(false, null!));
                                },
                                CreateAsyncMock = (maxSize, conditions, token) =>
                                {
                                    called = true;
                                    throw new Exception();
                                }
                            };
                        },
                    };
                }
            };
        });
        var controller = await _fixture.Root.CreateControllerAsync(
            name: "AzureFileStorageController",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.Controller.FileStorageController, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"0.0.1\",\"Account Name\":\"iotsolution1\",\"Account Key\":\"YMktKCsVW7tZrnFKLqFRD8MRICu3hNXxaNTB9Ejr/XyTnM30Eimpy6JvHDNWubcj\",\"Use Https\":true,\"Endpoint Suffix\":\"core.windows.net\"}",
            token: cts.Token);

        // act
        // assert
        var exception = await Assert.ThrowsAsync<ProviderClientException>(async () =>
        {
            _ = await controller.CreateFileAsync(
                name: "AzureFile",
                typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.AzureFile, GeoLibrary.ORiN3.Provider.Azure.Storage",
                option: "{\"@Version\":\"0.0.1\",\"Share Name\":\"shareName\",\"File Name\":\"hoge.txt\",\"Create New If Not Exists\":true,\"Length\":-1}",
                token: cts.Token);
        });
        Assert.False(called);

        await controller.DeleteAsync(cts.Token);
    }

    [Fact]
    [Trait("Category", nameof(AzureFile))]
    public async Task FileOpenThrowsAzureApiExecutionErrorTest()
    {
        // arrange
        var fileName = "hoge.txt";
        using var cts = new CancellationTokenSource(10000);
        using var methodReverter = ShareClientEx.SetCreateMethod((connectionString, containerName) =>
        {
            return new ShareClientMock(connectionString, containerName)
            {
                GetRootDirectoryClientMock = () =>
                {
                    return new ShareDirectoryClientMock(string.Empty)
                    {
                        GetFileClientMock = (fileName) =>
                        {
                            return new ShareFileClientMock(fileName)
                            {
                                ExistsAsyncMock = (_) =>
                                {
                                    throw new RequestFailedException("Simulated Azure exception during ExistsAsync call.");
                                }
                            };
                        },
                    };
                }
            };
        });
        var controller = await _fixture.Root.CreateControllerAsync(
            name: "AzureFileStorageController",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.Controller.FileStorageController, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"0.0.1\",\"Account Name\":\"iotsolution1\",\"Account Key\":\"YMktKCsVW7tZrnFKLqFRD8MRICu3hNXxaNTB9Ejr/XyTnM30Eimpy6JvHDNWubcj\",\"Use Https\":true,\"Endpoint Suffix\":\"core.windows.net\"}",
            token: cts.Token);
        var sut = await controller.CreateFileAsync(
            name: "AzureFile",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.AzureFile, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"0.0.1\",\"Share Name\":\"shareName\",\"File Name\":\"" + fileName + "\"}",
            token: cts.Token);

        // act
        var ex = await Assert.ThrowsAsync<ProviderClientException>(async () =>
        {
            await sut.OpenAsync(cts.Token);
        });

        // assert
        Assert.Equal((int)AzureStorageProviderResultCode.AzureApiExecutionError, (int)ex.ResultCode);
        Assert.Contains(fileName, ex.Message);
        Assert.Contains("Directory Name=empty", ex.Message);

        await sut.CloseAsync(cts.Token);
        await sut.DeleteAsync(cts.Token);
        await controller.DeleteAsync(cts.Token);
    }

    [Fact]
    [Trait("Category", nameof(AzureFile))]
    public async Task FileOpenThrowsAzureApiExecutionErrorTest2()
    {
        // arrange
        var fileName = "hoge.txt";
        using var cts = new CancellationTokenSource(10000);
        using var methodReverter = ShareClientEx.SetCreateMethod((connectionString, containerName) =>
        {
            return new ShareClientMock(connectionString, containerName)
            {
                GetRootDirectoryClientMock = () =>
                {
                    return new ShareDirectoryClientMock(string.Empty)
                    {
                        GetSubdirectoryClientMock = _ =>
                        {
                            throw new RequestFailedException("Simulated Azure exception during ExistsAsync call.");
                        }
                    };
                }
            };
        });
        var controller = await _fixture.Root.CreateControllerAsync(
            name: "AzureFileStorageController",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.Controller.FileStorageController, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"0.0.1\",\"Account Name\":\"iotsolution1\",\"Account Key\":\"YMktKCsVW7tZrnFKLqFRD8MRICu3hNXxaNTB9Ejr/XyTnM30Eimpy6JvHDNWubcj\",\"Use Https\":true,\"Endpoint Suffix\":\"core.windows.net\"}",
            token: cts.Token);
        var sut = await controller.CreateFileAsync(
            name: "AzureFile",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.AzureFile, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"0.0.1\",\"Share Name\":\"shareName\",\"File Name\":\"" + fileName + "\",\"Directory Name\":\"a/b/c\"}",
            token: cts.Token);

        // act
        var ex = await Assert.ThrowsAsync<ProviderClientException>(async () =>
        {
            await sut.OpenAsync(cts.Token);
        });

        // assert
        Assert.Equal((int)AzureStorageProviderResultCode.AzureApiExecutionError, (int)ex.ResultCode);
        Assert.Contains(fileName, ex.Message);
        Assert.Contains("a/b/c", ex.Message);

        await sut.CloseAsync(cts.Token);
        await sut.DeleteAsync(cts.Token);
        await controller.DeleteAsync(cts.Token);
    }

    [Fact]
    [Trait("Category", nameof(AzureFile))]
    public async Task FileGetLengthTest()
    {
        // arrange
        using var cts = new CancellationTokenSource(10000);
        using var methodReverter = ShareClientEx.SetCreateMethod((connectionString, containerName) =>
        {
            return new ShareClientMock(connectionString, containerName)
            {
                GetRootDirectoryClientMock = () =>
                {
                    return new ShareDirectoryClientMock(string.Empty)
                    {
                        GetFileClientMock = (fileName) =>
                        {
                            var mock = new ShareFileClientMock(fileName)
                            {
                                Buffer = [1, 2, 3, 4, 5]
                            };
                            return mock;
                        },
                    };
                }
            };
        });
        var controller = await _fixture.Root.CreateControllerAsync(
            name: "AzureFileStorageController",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.Controller.FileStorageController, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"0.0.1\",\"Account Name\":\"iotsolution1\",\"Account Key\":\"YMktKCsVW7tZrnFKLqFRD8MRICu3hNXxaNTB9Ejr/XyTnM30Eimpy6JvHDNWubcj\",\"Use Https\":true,\"Endpoint Suffix\":\"core.windows.net\"}",
            token: cts.Token);
        var sut = await controller.CreateFileAsync(
            name: "AzureFile",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.AzureFile, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"0.0.1\",\"Share Name\":\"shareName\",\"File Name\":\"hoge.txt\"}",
            token: cts.Token);
        await sut.OpenAsync(cts.Token);

        // act
        var length = await sut.GetLengthAsync(cts.Token);

        // assert
        Assert.Equal(5, length);

        await sut.CloseAsync(cts.Token);
        await sut.DeleteAsync(cts.Token);
        await controller.DeleteAsync(cts.Token);
    }

    [Fact]
    [Trait("Category", nameof(AzureFile))]
    public async Task FileGetLengthBeforeOpenTest()
    {
        // arrange
        using var cts = new CancellationTokenSource(10000);
        using var methodReverter = BlobContainerClientEx.SetCreateMethod((connectionString, containerName) =>
        {
            return new BlobContainerClientMock(connectionString, containerName);
        });
        var controller = await _fixture.Root.CreateControllerAsync(
            name: "AzureFileStorageController",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.Controller.FileStorageController, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"0.0.1\",\"Account Name\":\"iotsolution1\",\"Account Key\":\"YMktKCsVW7tZrnFKLqFRD8MRICu3hNXxaNTB9Ejr/XyTnM30Eimpy6JvHDNWubcj\",\"Use Https\":true,\"Endpoint Suffix\":\"core.windows.net\"}",
            token: cts.Token);
        var sut = await controller.CreateFileAsync(
            name: "AzureFile",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.AzureFile, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"0.0.1\",\"Share Name\":\"shareName\",\"File Name\":\"hoge.txt\"}",
            token: cts.Token);

        // act
        var actual = await Assert.ThrowsAsync<ProviderClientException>(async () =>
        {
            _ = await sut.GetLengthAsync(cts.Token);
        });

        // assert
        Assert.Equal((int)ResultCode.FileNotOpened, (int)actual.ResultCode);

        await sut.CloseAsync(cts.Token);
        await sut.DeleteAsync(cts.Token);
        await controller.DeleteAsync(cts.Token);
    }

    [Theory]
    [Trait("Category", nameof(AzureFile))]
    [InlineData(2, (int)ORiN3FileSeekOrigin.Begin, 2, new byte[] { 3 })]
    [InlineData(1, (int)ORiN3FileSeekOrigin.Begin, 1, new byte[] { 2, 3 })]
    [InlineData(2, (int)ORiN3FileSeekOrigin.Current, 2, new byte[] { 3 })]
    [InlineData(1, (int)ORiN3FileSeekOrigin.Current, 1, new byte[] { 2, 3 })]
    [InlineData(-2, (int)ORiN3FileSeekOrigin.End, 1, new byte[] { 2, 3 })]
    [InlineData(0, (int)ORiN3FileSeekOrigin.End, 3, new byte[0])]
    public async Task FileSeekTest(int destination, int origin, long expectedPos, byte[] expectedBytes)
    {
        // arrange
        using var cts = new CancellationTokenSource(10000);
        using var methodReverter = ShareClientEx.SetCreateMethod((connectionString, containerName) =>
        {
            return new ShareClientMock(connectionString, containerName)
            {
                GetRootDirectoryClientMock = () =>
                {
                    return new ShareDirectoryClientMock(string.Empty)
                    {
                        GetFileClientMock = (fileName) =>
                        {
                            var mock = new ShareFileClientMock(fileName)
                            {
                                Buffer = [1, 2, 3]
                            };
                            return mock;
                        },
                    };
                }
            };
        });
        var controller = await _fixture.Root.CreateControllerAsync(
            name: "AzureFileStorageController",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.Controller.FileStorageController, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"0.0.1\",\"Account Name\":\"iotsolution1\",\"Account Key\":\"YMktKCsVW7tZrnFKLqFRD8MRICu3hNXxaNTB9Ejr/XyTnM30Eimpy6JvHDNWubcj\",\"Use Https\":true,\"Endpoint Suffix\":\"core.windows.net\"}",
            token: cts.Token);
        var sut = await controller.CreateFileAsync(
            name: "AzureFile",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.AzureFile, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"0.0.1\",\"Share Name\":\"shareName\",\"File Name\":\"hoge.txt\"}",
            token: cts.Token);
        await sut.OpenAsync(cts.Token);

        // act
        var actualPos = await sut.SeekAsync(destination, (ORiN3FileSeekOrigin)origin, cts.Token);
        var actualBytes = new byte[3];
        var length = await sut.ReadAsync(actualBytes, cts.Token);

        // assert
        Assert.Equal(expectedPos, actualPos);
        Assert.Equal(expectedBytes, actualBytes.Take(length));

        await sut.CloseAsync(cts.Token);
        await sut.DeleteAsync(cts.Token);
        await controller.DeleteAsync(cts.Token);
    }

    [Fact]
    [Trait("Category", nameof(AzureFile))]
    public async Task FileSeekBeforeOpenTest()
    {
        // arrange
        using var cts = new CancellationTokenSource(10000);
        using var methodReverter = ShareClientEx.SetCreateMethod((connectionString, containerName) =>
        {
            return new ShareClientMock(connectionString, containerName);
        });
        var controller = await _fixture.Root.CreateControllerAsync(
            name: "AzureFileStorageController",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.Controller.FileStorageController, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"0.0.1\",\"Account Name\":\"iotsolution1\",\"Account Key\":\"YMktKCsVW7tZrnFKLqFRD8MRICu3hNXxaNTB9Ejr/XyTnM30Eimpy6JvHDNWubcj\",\"Use Https\":true,\"Endpoint Suffix\":\"core.windows.net\"}",
            token: cts.Token);
        var sut = await controller.CreateFileAsync(
            name: "AzureFile",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.AzureFile, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"0.0.1\",\"Share Name\":\"shareName\",\"File Name\":\"hoge.txt\"}",
            token: cts.Token);

        // act
        var actual = await Assert.ThrowsAsync<ProviderClientException>(async () =>
        {
            _ = await sut.SeekAsync(0, ORiN3FileSeekOrigin.Begin, cts.Token);
        });

        // assert
        Assert.Equal((int)ResultCode.FileNotOpened, (int)actual.ResultCode);

        await sut.CloseAsync(cts.Token);
        await sut.DeleteAsync(cts.Token);
        await controller.DeleteAsync(cts.Token);
    }

    [Fact]
    [Trait("Category", nameof(AzureFile))]
    public async Task FileCanReadTest()
    {
        // arrange
        using var cts = new CancellationTokenSource(10000);
        using var methodReverter = ShareClientEx.SetCreateMethod((connectionString, containerName) =>
        {
            return new ShareClientMock(connectionString, containerName);
        });
        var controller = await _fixture.Root.CreateControllerAsync(
            name: "AzureFileStorageController",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.Controller.FileStorageController, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"0.0.1\",\"Account Name\":\"iotsolution1\",\"Account Key\":\"YMktKCsVW7tZrnFKLqFRD8MRICu3hNXxaNTB9Ejr/XyTnM30Eimpy6JvHDNWubcj\",\"Use Https\":true,\"Endpoint Suffix\":\"core.windows.net\"}",
            token: cts.Token);
        var sut = await controller.CreateFileAsync(
            name: "AzureFile",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.AzureFile, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"0.0.1\",\"Share Name\":\"shareName\",\"File Name\":\"hoge.txt\"}",
            token: cts.Token);
        await sut.OpenAsync(cts.Token);

        // act
        var actual = await sut.CanReadAsync(cts.Token);

        // assert
        Assert.True(actual);

        await sut.CloseAsync(cts.Token);
        await sut.DeleteAsync(cts.Token);
        await controller.DeleteAsync(cts.Token);
    }

    [Fact]
    [Trait("Category", nameof(AzureFile))]
    public async Task FileCanReadBeforeOpenTest()
    {
        // arrange
        using var cts = new CancellationTokenSource(10000);
        using var methodReverter = ShareClientEx.SetCreateMethod((connectionString, containerName) =>
        {
            return new ShareClientMock(connectionString, containerName);
        });
        var controller = await _fixture.Root.CreateControllerAsync(
            name: "AzureFileStorageController",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.Controller.FileStorageController, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"0.0.1\",\"Account Name\":\"iotsolution1\",\"Account Key\":\"YMktKCsVW7tZrnFKLqFRD8MRICu3hNXxaNTB9Ejr/XyTnM30Eimpy6JvHDNWubcj\",\"Use Https\":true,\"Endpoint Suffix\":\"core.windows.net\"}",
            token: cts.Token);
        var sut = await controller.CreateFileAsync(
            name: "AzureFile",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.AzureFile, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"0.0.1\",\"Share Name\":\"shareName\",\"File Name\":\"hoge.txt\"}",
            token: cts.Token);

        // act
        var actual = await Assert.ThrowsAsync<ProviderClientException>(async () =>
        {
            _ = await sut.CanReadAsync(cts.Token);
        });

        // assert
        Assert.Equal((int)ResultCode.FileNotOpened, (int)actual.ResultCode);

        await sut.CloseAsync(cts.Token);
        await sut.DeleteAsync(cts.Token);
        await controller.DeleteAsync(cts.Token);
    }

    [Fact]
    [Trait("Category", nameof(AzureFile))]
    public async Task FileCanWriteTest()
    {
        // arrange
        using var cts = new CancellationTokenSource(10000);
        using var methodReverter = ShareClientEx.SetCreateMethod((connectionString, containerName) =>
        {
            return new ShareClientMock(connectionString, containerName);
        });
        var controller = await _fixture.Root.CreateControllerAsync(
            name: "AzureFileStorageController",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.Controller.FileStorageController, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"0.0.1\",\"Account Name\":\"iotsolution1\",\"Account Key\":\"YMktKCsVW7tZrnFKLqFRD8MRICu3hNXxaNTB9Ejr/XyTnM30Eimpy6JvHDNWubcj\",\"Use Https\":true,\"Endpoint Suffix\":\"core.windows.net\"}",
            token: cts.Token);
        var sut = await controller.CreateFileAsync(
            name: "AzureFile",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.AzureFile, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"0.0.1\",\"Share Name\":\"shareName\",\"File Name\":\"hoge.txt\"}",
            token: cts.Token);
        await sut.OpenAsync(cts.Token);

        // act
        var actual = await sut.CanWriteAsync(cts.Token);

        // assert
        Assert.True(actual);

        await sut.CloseAsync(cts.Token);
        await sut.DeleteAsync(cts.Token);
        await controller.DeleteAsync(cts.Token);
    }

    [Fact]
    [Trait("Category", nameof(AzureFile))]
    public async Task FileCanWriteBeforeOpenTest()
    {
        // arrange
        using var cts = new CancellationTokenSource(10000);
        using var methodReverter = ShareClientEx.SetCreateMethod((connectionString, containerName) =>
        {
            return new ShareClientMock(connectionString, containerName);
        });
        var controller = await _fixture.Root.CreateControllerAsync(
            name: "AzureFileStorageController",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.Controller.FileStorageController, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"0.0.1\",\"Account Name\":\"iotsolution1\",\"Account Key\":\"YMktKCsVW7tZrnFKLqFRD8MRICu3hNXxaNTB9Ejr/XyTnM30Eimpy6JvHDNWubcj\",\"Use Https\":true,\"Endpoint Suffix\":\"core.windows.net\"}",
            token: cts.Token);
        var sut = await controller.CreateFileAsync(
            name: "AzureFile",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.AzureFile, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"0.0.1\",\"Share Name\":\"shareName\",\"File Name\":\"hoge.txt\"}",
            token: cts.Token);

        // act
        var actual = await Assert.ThrowsAsync<ProviderClientException>(async () =>
        {
            _ = await sut.CanWriteAsync(cts.Token);
        });

        // assert
        Assert.Equal((int)ResultCode.FileNotOpened, (int)actual.ResultCode);

        await sut.CloseAsync(cts.Token);
        await sut.DeleteAsync(cts.Token);
        await controller.DeleteAsync(cts.Token);
    }

    [Fact]
    [Trait("Category", nameof(AzureFile))]
    public async Task FileReadTest()
    {
        // arrange
        using var cts = new CancellationTokenSource(10000);
        using var methodReverter = ShareClientEx.SetCreateMethod((connectionString, containerName) =>
        {
            return new ShareClientMock(connectionString, containerName)
            {
                GetRootDirectoryClientMock = () =>
                {
                    return new ShareDirectoryClientMock(string.Empty)
                    {
                        GetFileClientMock = (fileName) =>
                        {
                            var mock = new ShareFileClientMock(fileName)
                            {
                                Buffer = [1, 2, 3]
                            };
                            return mock;
                        },
                    };
                }
            };
        });
        var controller = await _fixture.Root.CreateControllerAsync(
            name: "AzureFileStorageController",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.Controller.FileStorageController, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"0.0.1\",\"Account Name\":\"iotsolution1\",\"Account Key\":\"YMktKCsVW7tZrnFKLqFRD8MRICu3hNXxaNTB9Ejr/XyTnM30Eimpy6JvHDNWubcj\",\"Use Https\":true,\"Endpoint Suffix\":\"core.windows.net\"}",
            token: cts.Token);
        var sut = await controller.CreateFileAsync(
            name: "AzureFile",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.AzureFile, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"0.0.1\",\"Share Name\":\"shareName\",\"File Name\":\"hoge.txt\"}",
            token: cts.Token);
        await sut.OpenAsync(cts.Token);

        // act
        var actualBytes = new byte[3];
        var length = await sut.ReadAsync(actualBytes, cts.Token);
        _ = await sut.SeekAsync(-2, ORiN3FileSeekOrigin.Current, cts.Token);
        var actualBytes2 = new byte[1];
        var length2 = await sut.ReadAsync(actualBytes2, cts.Token);
        var actualBytes3 = Array.Empty<byte>();
        var length3 = await sut.ReadAsync(actualBytes3, cts.Token);
        _ = await sut.SeekAsync(0, ORiN3FileSeekOrigin.Begin, cts.Token);
        var actualBytes4 = new byte[4];
        var length4 = await sut.ReadAsync(actualBytes4, cts.Token);

        // assert
        Assert.Equal(new byte[] { 1, 2, 3 }, actualBytes);
        Assert.Equal(3, length);
        Assert.Equal(new byte[] { 2 }, actualBytes2);
        Assert.Equal(1, length2);
        Assert.Equal([], actualBytes3);
        Assert.Equal(0, length3);
        Assert.Equal(new byte[] { 1, 2, 3, 0 }, actualBytes4);
        Assert.Equal(3, length4);

        await sut.CloseAsync(cts.Token);
        await sut.DeleteAsync(cts.Token);
        await controller.DeleteAsync(cts.Token);
    }

    [Fact]
    [Trait("Category", nameof(AzureFile))]
    public async Task FileReadBeforeOpenTest()
    {
        // arrange
        using var cts = new CancellationTokenSource(10000);
        using var methodReverter = ShareClientEx.SetCreateMethod((connectionString, containerName) =>
        {
            return new ShareClientMock(connectionString, containerName);
        });
        var controller = await _fixture.Root.CreateControllerAsync(
            name: "AzureFileStorageController",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.Controller.FileStorageController, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"0.0.1\",\"Account Name\":\"iotsolution1\",\"Account Key\":\"YMktKCsVW7tZrnFKLqFRD8MRICu3hNXxaNTB9Ejr/XyTnM30Eimpy6JvHDNWubcj\",\"Use Https\":true,\"Endpoint Suffix\":\"core.windows.net\"}",
            token: cts.Token);
        var sut = await controller.CreateFileAsync(
            name: "AzureFile",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.AzureFile, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"0.0.1\",\"Share Name\":\"shareName\",\"File Name\":\"hoge.txt\"}",
            token: cts.Token);

        // act
        var actual = await Assert.ThrowsAsync<ProviderClientException>(async () =>
        {
            var actualBytes = new byte[3];
            _ = await sut.ReadAsync(actualBytes, cts.Token);
        });

        // assert
        Assert.Equal((int)ResultCode.FileNotOpened, (int)actual.ResultCode);

        await sut.CloseAsync(cts.Token);
        await sut.DeleteAsync(cts.Token);
        await controller.DeleteAsync(cts.Token);
    }

    [Fact]
    [Trait("Category", nameof(AzureFile))]
    public async Task FileWriteAndReadTest()
    {
        // arrange
        using var cts = new CancellationTokenSource(10000);
        using var methodReverter = ShareClientEx.SetCreateMethod((connectionString, containerName) =>
        {
            return new ShareClientMock(connectionString, containerName)
            {
                GetRootDirectoryClientMock = () =>
                {
                    return new ShareDirectoryClientMock(string.Empty)
                    {
                        GetFileClientMock = (fileName) =>
                        {
                            var mock = new ShareFileClientMock(fileName)
                            {
                                Buffer = new byte[1024]
                            };
                            return mock;
                        },
                    };
                }
            };
        });
        var controller = await _fixture.Root.CreateControllerAsync(
            name: "AzureFileStorageController",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.Controller.FileStorageController, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"0.0.1\",\"Account Name\":\"iotsolution1\",\"Account Key\":\"YMktKCsVW7tZrnFKLqFRD8MRICu3hNXxaNTB9Ejr/XyTnM30Eimpy6JvHDNWubcj\",\"Use Https\":true,\"Endpoint Suffix\":\"core.windows.net\"}",
            token: cts.Token);

        // act
        var sut = await controller.CreateFileAsync(
            name: "AzureFile",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.AzureFile, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"0.0.1\",\"Share Name\":\"shareName\",\"File Name\":\"hoge.txt\"}",
            token: cts.Token);
        await sut.OpenAsync(cts.Token);
        await sut.SeekAsync(511, ORiN3FileSeekOrigin.Begin, cts.Token);
        await sut.WriteAsync(new byte[] { 1, 2, 3 }, cts.Token);
        await sut.SeekAsync(0, ORiN3FileSeekOrigin.Begin, cts.Token);
        var buffer = new byte[1024];
        await sut.ReadAsync(buffer, cts.Token);

        Assert.True(buffer.Take(511).All(_ => _ == 0));
        Assert.True(buffer.Skip(515).All(_ => _ == 0));
        Assert.Equal(1, buffer[511]);
        Assert.Equal(2, buffer[512]);
        Assert.Equal(3, buffer[513]);

        await sut.CloseAsync(cts.Token);
        await sut.DeleteAsync(cts.Token);
        await controller.DeleteAsync(cts.Token);
    }

    [Fact]
    [Trait("Category", nameof(AzureFile))]
    public async Task FileWriteBeforeOpenTest()
    {
        // arrange
        using var cts = new CancellationTokenSource(10000);
        using var methodReverter = ShareClientEx.SetCreateMethod((connectionString, containerName) =>
        {
            return new ShareClientMock(connectionString, containerName);
        });
        var controller = await _fixture.Root.CreateControllerAsync(
            name: "AzureFileStorageController",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.Controller.FileStorageController, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"0.0.1\",\"Account Name\":\"iotsolution1\",\"Account Key\":\"YMktKCsVW7tZrnFKLqFRD8MRICu3hNXxaNTB9Ejr/XyTnM30Eimpy6JvHDNWubcj\",\"Use Https\":true,\"Endpoint Suffix\":\"core.windows.net\"}",
            token: cts.Token);
        var sut = await controller.CreateFileAsync(
            name: "AzureFile",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.AzureFile, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"0.0.1\",\"Share Name\":\"shareName\",\"File Name\":\"hoge.txt\"}",
            token: cts.Token);

        // act
        var actual = await Assert.ThrowsAsync<ProviderClientException>(async () =>
        {
            await sut.WriteAsync(new byte[] { 1, 2, 3 }, cts.Token);
        });

        // assert
        Assert.Equal((int)ResultCode.FileNotOpened, (int)actual.ResultCode);

        await sut.CloseAsync(cts.Token);
        await sut.DeleteAsync(cts.Token);
        await controller.DeleteAsync(cts.Token);
    }
}