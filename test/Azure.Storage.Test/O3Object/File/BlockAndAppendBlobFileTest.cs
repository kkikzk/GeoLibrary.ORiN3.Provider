using Azure;
using Azure.Storage.Blobs.Models;
using Design.ORiN3.Common.V1.AutoGenerated;
using Design.ORiN3.Provider.V1;
using GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.Interface;
using GeoLibrary.ORiN3.Provider.Azure.Storage.Test.Mock;
using GeoLibrary.ORiN3.Provider.TestBaseLib;
using Message.Client.ORiN3.Provider;
using System.Text.Json;
using Xunit.Abstractions;

namespace GeoLibrary.ORiN3.Provider.Azure.Storage.Test.O3Object.File;

public class BlockAndAppendBlobFileTest : IClassFixture<ProviderTestFixture<BlockAndAppendBlobFileTest>>, IDisposable
{
    private readonly ITestOutputHelper _output;
    private readonly ProviderTestFixture<BlockAndAppendBlobFileTest> _fixture;
    private readonly CancellationTokenSource _tokenSource = new(10000);

    public BlockAndAppendBlobFileTest(ProviderTestFixture<BlockAndAppendBlobFileTest> fixture, ITestOutputHelper output)
    {
        _fixture = fixture;
        _output = output;
        _fixture.InitAsync<AzureRootObjectForTest>(_output, _tokenSource.Token).Wait();
    }

    public void Dispose()
    {
        try
        {
            _tokenSource.Dispose();
        }
        catch
        {
            // do nothing
        }
        GC.SuppressFinalize(this);
    }

    [Theory]
    [Trait("Category", "BlockAndAppendBlobFile")]
    [InlineData(true, "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.BlockBlobFile, GeoLibrary.ORiN3.Provider.Azure.Storage", "containerName", "hoge.txt")]
    [InlineData(false, "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.AppendBlobFile, GeoLibrary.ORiN3.Provider.Azure.Storage", "containerName2", "a/b/c/fuga.txt")]
    public async Task FileOptionTest(bool isBlockBlob, string typeName, string containerName, string blobPath)
    {
        // arrange
        using var cts = new CancellationTokenSource(10000);
        var actualConnectionString = string.Empty;
        var actualcontainerName = string.Empty;
        var actualBlobkBlobPath = string.Empty;
        var actualAppendBlobPath = string.Empty;
        using var methodReverter = BlobContainerClientEx.SetCreateMethod((connectionString, containerName) =>
        {
            actualConnectionString = connectionString;
            actualcontainerName = containerName;
            return new BlobContainerClientMock(connectionString, containerName)
            {
                GetBlockBlobClientMock = (blobName) =>
                {
                    actualBlobkBlobPath = blobName;
                    return new BlockBlobClientMock(blobName);
                },
                GetAppendBlobClientMock = (blobName) =>
                {
                    actualAppendBlobPath = blobName;
                    return new AppendBlobClientMock(blobName);
                },
            };
        });
        var controller = await _fixture.Root.CreateControllerAsync(
            name: "AzureBlobStorageController",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.Controller.BlobStorageController, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"1.0.0\",\"Account Name\":\"iotsolution1\",\"Access Key\":\"YMktKCsVW7tZrnFKLqFRD8MRICu3hNXxaNTB9Ejr/XyTnM30Eimpy6JvHDNWubcj\",\"Use Https\":true,\"Endpoint Suffix\":\"core.windows.net\"}",
            token: cts.Token);

        // act
        var sut = await controller.CreateFileAsync(
            name: "BlobFile",
            typeName: typeName,
            option: "{\"@Version\":\"1.0.0\",\"Container Name\":\"" + containerName + "\",\"Blob Path\":\"" + blobPath + "\"}",
            token: cts.Token);
        await sut.OpenAsync(cts.Token);

        // assert
        Assert.Equal(containerName, actualcontainerName);
        Assert.Equal(blobPath, isBlockBlob ? actualBlobkBlobPath : actualAppendBlobPath);
        Assert.Equal("DefaultEndpointsProtocol=https;AccountName=iotsolution1;AccountKey=testKey;EndpointSuffix=core.windows.net", actualConnectionString);

        await sut.CloseAsync(cts.Token);
        await sut.DeleteAsync(cts.Token);
        await controller.DeleteAsync(cts.Token);
    }

    [Theory]
    [Trait("Category", "BlockAndAppendBlobFile")]
    [InlineData("GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.BlockBlobFile, GeoLibrary.ORiN3.Provider.Azure.Storage", "hoge.txt")]
    [InlineData("GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.AppendBlobFile, GeoLibrary.ORiN3.Provider.Azure.Storage", "a/b/c/fuga.txt")]
    public async Task FileInvalidContainerNameOptionTest(string typeName, string blobPath)
    {
        // arrange
        using var cts = new CancellationTokenSource(10000);
        var actualConnectionString = string.Empty;
        var actualcontainerName = string.Empty;
        var actualBlobkBlobPath = string.Empty;
        var actualAppendBlobPath = string.Empty;
        using var methodReverter = BlobContainerClientEx.SetCreateMethod((connectionString, containerName) =>
        {
            actualConnectionString = connectionString;
            actualcontainerName = containerName;
            return new BlobContainerClientMock(connectionString, containerName)
            {
                GetBlockBlobClientMock = (blobName) =>
                {
                    actualBlobkBlobPath = blobName;
                    return new BlockBlobClientMock(blobName);
                },
                GetAppendBlobClientMock = (blobName) =>
                {
                    actualAppendBlobPath = blobName;
                    return new AppendBlobClientMock(blobName);
                },
            };
        });
        var controller = await _fixture.Root.CreateControllerAsync(
            name: "AzureBlobStorageController",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.Controller.BlobStorageController, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"1.0.0\",\"Account Name\":\"iotsolution1\",\"Access Key\":\"YMktKCsVW7tZrnFKLqFRD8MRICu3hNXxaNTB9Ejr/XyTnM30Eimpy6JvHDNWubcj\",\"Use Https\":true,\"Endpoint Suffix\":\"core.windows.net\"}",
            token: cts.Token);

        // act
        var ex = await Assert.ThrowsAsync<ProviderClientException>(async () =>
        {
            _ = await controller.CreateFileAsync(
                name: "BlobFile",
                typeName: typeName,
                option: "{\"@Version\":\"1.0.0\",\"Blob Path\":\"" + blobPath + "\"}",
                token: cts.Token);
        });

        // assert
        Assert.Equal((int)ResultCode.JsonElementNotFound, (int)ex.ResultCode);
        Assert.Contains("Container Name", ex.Message);

        await controller.DeleteAsync(cts.Token);
    }

    [Theory]
    [Trait("Category", "BlockAndAppendBlobFile")]
    [InlineData("GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.BlockBlobFile, GeoLibrary.ORiN3.Provider.Azure.Storage", "containerName")]
    [InlineData("GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.AppendBlobFile, GeoLibrary.ORiN3.Provider.Azure.Storage", "containerName2")]
    public async Task FileInvalidBlobPathOptionTest(string typeName, string containerName)
    {
        // arrange
        using var cts = new CancellationTokenSource(10000);
        var actualConnectionString = string.Empty;
        var actualcontainerName = string.Empty;
        var actualBlobkBlobPath = string.Empty;
        var actualAppendBlobPath = string.Empty;
        using var methodReverter = BlobContainerClientEx.SetCreateMethod((connectionString, containerName) =>
        {
            actualConnectionString = connectionString;
            actualcontainerName = containerName;
            return new BlobContainerClientMock(connectionString, containerName)
            {
                GetBlockBlobClientMock = (blobName) =>
                {
                    actualBlobkBlobPath = blobName;
                    return new BlockBlobClientMock(blobName);
                },
                GetAppendBlobClientMock = (blobName) =>
                {
                    actualAppendBlobPath = blobName;
                    return new AppendBlobClientMock(blobName);
                },
            };
        });
        var controller = await _fixture.Root.CreateControllerAsync(
            name: "AzureBlobStorageController",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.Controller.BlobStorageController, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"1.0.0\",\"Account Name\":\"iotsolution1\",\"Access Key\":\"YMktKCsVW7tZrnFKLqFRD8MRICu3hNXxaNTB9Ejr/XyTnM30Eimpy6JvHDNWubcj\",\"Use Https\":true,\"Endpoint Suffix\":\"core.windows.net\"}",
            token: cts.Token);

        // act
        var ex = await Assert.ThrowsAsync<ProviderClientException>(async () =>
        {
            _ = await controller.CreateFileAsync(
                name: "BlobFile",
                typeName: typeName,
                option: "{\"@Version\":\"1.0.0\",\"Container Name\":\"" + containerName + "\"}",
                token: cts.Token);
        });

        // assert
        Assert.Equal((int)ResultCode.JsonElementNotFound, (int)ex.ResultCode);
        Assert.Contains("Blob Path", ex.Message);

        await controller.DeleteAsync(cts.Token);
    }

    [Theory]
    [Trait("Category", "BlockAndAppendBlobFile")]
    [InlineData("GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.BlockBlobFile, GeoLibrary.ORiN3.Provider.Azure.Storage", "containerName", "hoge.txt")]
    [InlineData("GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.AppendBlobFile, GeoLibrary.ORiN3.Provider.Azure.Storage", "containerName2", "a/b/c/fuga.txt")]
    public async Task FileNotFoundTest(string typeName, string containerName, string blobPath)
    {
        // arrange
        using var cts = new CancellationTokenSource(10000);
        using var methodReverter = BlobContainerClientEx.SetCreateMethod((connectionString, containerName) =>
        {
            return new BlobContainerClientMock(connectionString, containerName)
            {
                GetBlockBlobClientMock = (blobName) =>
                {
                    return new BlockBlobClientMock(blobName, false);
                },
                GetAppendBlobClientMock = (blobName) =>
                {
                    return new AppendBlobClientMock(blobName, false);
                },
            };
        });
        var controller = await _fixture.Root.CreateControllerAsync(
            name: "AzureBlobStorageController",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.Controller.BlobStorageController, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"1.0.0\",\"Account Name\":\"iotsolution1\",\"Access Key\":\"YMktKCsVW7tZrnFKLqFRD8MRICu3hNXxaNTB9Ejr/XyTnM30Eimpy6JvHDNWubcj\",\"Use Https\":true,\"Endpoint Suffix\":\"core.windows.net\"}",
            token: cts.Token);
        var sut = await controller.CreateFileAsync(
            name: "BlobFile",
            typeName: typeName,
            option: "{\"@Version\":\"1.0.0\",\"Container Name\":\"" + containerName + "\",\"Blob Path\":\"" + blobPath + "\"}",
            token: cts.Token);

        // act
        var ex = await Assert.ThrowsAsync<ProviderClientException>(async () =>
        {
            await sut.OpenAsync(cts.Token);
        });

        // assert
        Assert.Equal((int)AzureStorageProviderResultCode.BlobNotFound, (int)ex.ResultCode);
        Assert.Contains(blobPath, ex.Message);

        await sut.CloseAsync(cts.Token);
        await sut.DeleteAsync(cts.Token);
        await controller.DeleteAsync(cts.Token);
    }

    [Theory]
    [Trait("Category", "BlockAndAppendBlobFile")]
    [InlineData("GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.BlockBlobFile, GeoLibrary.ORiN3.Provider.Azure.Storage", "containerName", "hoge.txt")]
    [InlineData("GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.AppendBlobFile, GeoLibrary.ORiN3.Provider.Azure.Storage", "containerName2", "a/b/c/fuga.txt")]
    public async Task FileOpenThrowsAzureApiExecutionErrorTest(string typeName, string containerName, string blobPath)
    {
        // arrange
        using var cts = new CancellationTokenSource(10000);
        using var methodReverter = BlobContainerClientEx.SetCreateMethod((connectionString, containerName) =>
        {
            return new BlobContainerClientMock(connectionString, containerName)
            {
                GetBlockBlobClientMock = (blobName) =>
                {
                    return new BlockBlobClientMock(blobName, false)
                    {
                        ExistsAsyncMock = (token) =>
                        {
                            throw new RequestFailedException("Simulated Azure exception during ExistsAsync call.");
                        },
                    };
                },
                GetAppendBlobClientMock = (blobName) =>
                {
                    return new AppendBlobClientMock(blobName, false)
                    {
                        ExistsAsyncMock = (token) =>
                        {
                            throw new RequestFailedException("Simulated Azure exception during ExistsAsync call.");
                        },
                    };
                },
            };
        });
        var controller = await _fixture.Root.CreateControllerAsync(
            name: "AzureBlobStorageController",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.Controller.BlobStorageController, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"1.0.0\",\"Account Name\":\"iotsolution1\",\"Access Key\":\"YMktKCsVW7tZrnFKLqFRD8MRICu3hNXxaNTB9Ejr/XyTnM30Eimpy6JvHDNWubcj\",\"Use Https\":true,\"Endpoint Suffix\":\"core.windows.net\"}",
            token: cts.Token);
        var sut = await controller.CreateFileAsync(
            name: "BlobFile",
            typeName: typeName,
            option: "{\"@Version\":\"1.0.0\",\"Container Name\":\"" + containerName + "\",\"Blob Path\":\"" + blobPath + "\"}",
            token: cts.Token);

        // act
        var ex = await Assert.ThrowsAsync<ProviderClientException>(async () =>
        {
            await sut.OpenAsync(cts.Token);
        });

        // assert
        Assert.Equal((int)AzureStorageProviderResultCode.AzureApiExecutionError, (int)ex.ResultCode);
        Assert.Contains(blobPath, ex.Message);

        await sut.CloseAsync(cts.Token);
        await sut.DeleteAsync(cts.Token);
        await controller.DeleteAsync(cts.Token);
    }

    [Theory]
    [Trait("Category", "BlockAndAppendBlobFile")]
    [InlineData("GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.BlockBlobFile, GeoLibrary.ORiN3.Provider.Azure.Storage", "containerName", "hoge.txt")]
    [InlineData("GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.AppendBlobFile, GeoLibrary.ORiN3.Provider.Azure.Storage", "containerName2", "a/b/c/fuga.txt")]
    public async Task FileGetLengthTest(string typeName, string containerName, string blobPath)
    {
        // arrange
        using var cts = new CancellationTokenSource(10000);
        using var methodReverter = BlobContainerClientEx.SetCreateMethod((connectionString, containerName) =>
        {
            return new BlobContainerClientMock(connectionString, containerName);
        });
        var controller = await _fixture.Root.CreateControllerAsync(
            name: "AzureBlobStorageController",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.Controller.BlobStorageController, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"1.0.0\",\"Account Name\":\"iotsolution1\",\"Access Key\":\"YMktKCsVW7tZrnFKLqFRD8MRICu3hNXxaNTB9Ejr/XyTnM30Eimpy6JvHDNWubcj\",\"Use Https\":true,\"Endpoint Suffix\":\"core.windows.net\"}",
            token: cts.Token);
        var sut = await controller.CreateFileAsync(
            name: "BlobFile",
            typeName: typeName,
            option: "{\"@Version\":\"1.0.0\",\"Container Name\":\"" + containerName + "\",\"Blob Path\":\"" + blobPath + "\"}",
            token: cts.Token);
        await sut.OpenAsync(cts.Token);

        // act
        var length = await sut.GetLengthAsync(cts.Token);

        // assert
        Assert.Equal(3, length);

        await sut.CloseAsync(cts.Token);
        await sut.DeleteAsync(cts.Token);
        await controller.DeleteAsync(cts.Token);
    }

    [Theory]
    [Trait("Category", "BlockAndAppendBlobFile")]
    [InlineData("GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.BlockBlobFile, GeoLibrary.ORiN3.Provider.Azure.Storage")]
    [InlineData("GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.AppendBlobFile, GeoLibrary.ORiN3.Provider.Azure.Storage")]
    public async Task FileGetLengthBeforeOpenTest(string typeName)
    {
        // arrange
        using var cts = new CancellationTokenSource(10000);
        using var methodReverter = BlobContainerClientEx.SetCreateMethod((connectionString, containerName) =>
        {
            return new BlobContainerClientMock(connectionString, containerName);
        });
        var controller = await _fixture.Root.CreateControllerAsync(
            name: "AzureBlobStorageController",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.Controller.BlobStorageController, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"1.0.0\",\"Account Name\":\"iotsolution1\",\"Access Key\":\"YMktKCsVW7tZrnFKLqFRD8MRICu3hNXxaNTB9Ejr/XyTnM30Eimpy6JvHDNWubcj\",\"Use Https\":true,\"Endpoint Suffix\":\"core.windows.net\"}",
            token: cts.Token);
        var sut = await controller.CreateFileAsync(
            name: "BlobFile",
            typeName: typeName,
            option: "{\"@Version\":\"1.0.0\",\"Container Name\":\"containerName\",\"Blob Path\":\"hoge.txt\"}",
            token: cts.Token);

        // act
        var actual = await Assert.ThrowsAsync<ProviderClientException>(async () =>
        {
            _ = await sut.GetLengthAsync(cts.Token);
        });

        // assert
        Assert.Equal((int)ResultCode.FileNotOpened, (int)actual.ResultCode);

        await sut.CloseAsync(cts.Token);
        await sut.DeleteAsync(cts.Token);
        await controller.DeleteAsync(cts.Token);
    }

    [Theory]
    [Trait("Category", "BlockAndAppendBlobFile")]
    [InlineData("GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.BlockBlobFile, GeoLibrary.ORiN3.Provider.Azure.Storage", 2, (int)ORiN3FileSeekOrigin.Begin, 2, new byte[] { 3 })]
    [InlineData("GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.AppendBlobFile, GeoLibrary.ORiN3.Provider.Azure.Storage", 1, (int)ORiN3FileSeekOrigin.Begin, 1, new byte[] { 2, 3 })]
    [InlineData("GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.BlockBlobFile, GeoLibrary.ORiN3.Provider.Azure.Storage", 2, (int)ORiN3FileSeekOrigin.Current, 2, new byte[] { 3 })]
    [InlineData("GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.AppendBlobFile, GeoLibrary.ORiN3.Provider.Azure.Storage", 1, (int)ORiN3FileSeekOrigin.Current, 1, new byte[] { 2, 3 })]
    [InlineData("GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.BlockBlobFile, GeoLibrary.ORiN3.Provider.Azure.Storage", -2, (int)ORiN3FileSeekOrigin.End, 1, new byte[] { 2, 3 })]
    [InlineData("GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.AppendBlobFile, GeoLibrary.ORiN3.Provider.Azure.Storage", 0, (int)ORiN3FileSeekOrigin.End, 3, new byte[0])]
    public async Task FileSeekTest(string typeName, int destination, int origin, long expectedPos, byte[] expectedBytes)
    {
        // arrange
        using var cts = new CancellationTokenSource(10000);
        using var methodReverter = BlobContainerClientEx.SetCreateMethod((connectionString, containerName) =>
        {
            return new BlobContainerClientMock(connectionString, containerName);
        });
        var controller = await _fixture.Root.CreateControllerAsync(
            name: "AzureBlobStorageController",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.Controller.BlobStorageController, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"1.0.0\",\"Account Name\":\"iotsolution1\",\"Access Key\":\"YMktKCsVW7tZrnFKLqFRD8MRICu3hNXxaNTB9Ejr/XyTnM30Eimpy6JvHDNWubcj\",\"Use Https\":true,\"Endpoint Suffix\":\"core.windows.net\"}",
            token: cts.Token);
        var sut = await controller.CreateFileAsync(
            name: "BlobFile",
            typeName: typeName,
            option: "{\"@Version\":\"1.0.0\",\"Container Name\":\"containerName\",\"Blob Path\":\"hoge.txt\"}",
            token: cts.Token);
        await sut.OpenAsync(cts.Token);

        // act
        var actualPos = await sut.SeekAsync(destination, (ORiN3FileSeekOrigin)origin, cts.Token);
        var actualBytes = new byte[3];
        var length = await sut.ReadAsync(actualBytes, cts.Token);

        // assert
        Assert.Equal(expectedPos, actualPos);
        Assert.Equal(expectedBytes, actualBytes.Take(length));

        await sut.CloseAsync(cts.Token);
        await sut.DeleteAsync(cts.Token);
        await controller.DeleteAsync(cts.Token);
    }

    [Theory]
    [Trait("Category", "BlockAndAppendBlobFile")]
    [InlineData("GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.BlockBlobFile, GeoLibrary.ORiN3.Provider.Azure.Storage")]
    [InlineData("GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.AppendBlobFile, GeoLibrary.ORiN3.Provider.Azure.Storage")]
    public async Task FileSeekBeforeOpenTest(string typeName)
    {
        // arrange
        using var cts = new CancellationTokenSource(10000);
        using var methodReverter = BlobContainerClientEx.SetCreateMethod((connectionString, containerName) =>
        {
            return new BlobContainerClientMock(connectionString, containerName);
        });
        var controller = await _fixture.Root.CreateControllerAsync(
            name: "AzureBlobStorageController",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.Controller.BlobStorageController, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"1.0.0\",\"Account Name\":\"iotsolution1\",\"Access Key\":\"YMktKCsVW7tZrnFKLqFRD8MRICu3hNXxaNTB9Ejr/XyTnM30Eimpy6JvHDNWubcj\",\"Use Https\":true,\"Endpoint Suffix\":\"core.windows.net\"}",
            token: cts.Token);
        var sut = await controller.CreateFileAsync(
            name: "BlobFile",
            typeName: typeName,
            option: "{\"@Version\":\"1.0.0\",\"Container Name\":\"containerName\",\"Blob Path\":\"hoge.txt\"}",
            token: cts.Token);

        // act
        var actual = await Assert.ThrowsAsync<ProviderClientException>(async () =>
        {
            _ = await sut.SeekAsync(0, ORiN3FileSeekOrigin.Begin, cts.Token);
        });

        // assert
        Assert.Equal((int)ResultCode.FileNotOpened, (int)actual.ResultCode);

        await sut.CloseAsync(cts.Token);
        await sut.DeleteAsync(cts.Token);
        await controller.DeleteAsync(cts.Token);
    }

    [Theory]
    [Trait("Category", "BlockAndAppendBlobFile")]
    [InlineData("GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.BlockBlobFile, GeoLibrary.ORiN3.Provider.Azure.Storage")]
    [InlineData("GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.AppendBlobFile, GeoLibrary.ORiN3.Provider.Azure.Storage")]
    public async Task FileCanReadTest(string typeName)
    {
        // arrange
        using var cts = new CancellationTokenSource(10000);
        using var methodReverter = BlobContainerClientEx.SetCreateMethod((connectionString, containerName) =>
        {
            return new BlobContainerClientMock(connectionString, containerName);
        });
        var controller = await _fixture.Root.CreateControllerAsync(
            name: "AzureBlobStorageController",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.Controller.BlobStorageController, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"1.0.0\",\"Account Name\":\"iotsolution1\",\"Access Key\":\"YMktKCsVW7tZrnFKLqFRD8MRICu3hNXxaNTB9Ejr/XyTnM30Eimpy6JvHDNWubcj\",\"Use Https\":true,\"Endpoint Suffix\":\"core.windows.net\"}",
            token: cts.Token);
        var sut = await controller.CreateFileAsync(
            name: "BlobFile",
            typeName: typeName,
            option: "{\"@Version\":\"1.0.0\",\"Container Name\":\"containerName\",\"Blob Path\":\"hoge.txt\"}",
            token: cts.Token);
        await sut.OpenAsync(cts.Token);

        // act
        var actual = await sut.CanReadAsync(cts.Token);

        // assert
        Assert.True(actual);

        await sut.CloseAsync(cts.Token);
        await sut.DeleteAsync(cts.Token);
        await controller.DeleteAsync(cts.Token);
    }

    [Theory]
    [Trait("Category", "BlockAndAppendBlobFile")]
    [InlineData("GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.BlockBlobFile, GeoLibrary.ORiN3.Provider.Azure.Storage")]
    [InlineData("GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.AppendBlobFile, GeoLibrary.ORiN3.Provider.Azure.Storage")]
    public async Task FileCanReadBeforeOpenTest(string typeName)
    {
        // arrange
        using var cts = new CancellationTokenSource(10000);
        using var methodReverter = BlobContainerClientEx.SetCreateMethod((connectionString, containerName) =>
        {
            return new BlobContainerClientMock(connectionString, containerName);
        });
        var controller = await _fixture.Root.CreateControllerAsync(
            name: "AzureBlobStorageController",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.Controller.BlobStorageController, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"1.0.0\",\"Account Name\":\"iotsolution1\",\"Access Key\":\"YMktKCsVW7tZrnFKLqFRD8MRICu3hNXxaNTB9Ejr/XyTnM30Eimpy6JvHDNWubcj\",\"Use Https\":true,\"Endpoint Suffix\":\"core.windows.net\"}",
            token: cts.Token);
        var sut = await controller.CreateFileAsync(
            name: "BlobFile",
            typeName: typeName,
            option: "{\"@Version\":\"1.0.0\",\"Container Name\":\"containerName\",\"Blob Path\":\"hoge.txt\"}",
            token: cts.Token);

        // act
        var actual = await Assert.ThrowsAsync<ProviderClientException>(async () =>
        {
            _ = await sut.CanReadAsync(cts.Token);
        });

        // assert
        Assert.Equal((int)ResultCode.FileNotOpened, (int)actual.ResultCode);

        await sut.CloseAsync(cts.Token);
        await sut.DeleteAsync(cts.Token);
        await controller.DeleteAsync(cts.Token);
    }

    [Theory]
    [Trait("Category", "BlockAndAppendBlobFile")]
    [InlineData("GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.BlockBlobFile, GeoLibrary.ORiN3.Provider.Azure.Storage")]
    [InlineData("GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.AppendBlobFile, GeoLibrary.ORiN3.Provider.Azure.Storage")]
    public async Task FileCanWriteTest(string typeName)
    {
        // arrange
        using var cts = new CancellationTokenSource(10000);
        using var methodReverter = BlobContainerClientEx.SetCreateMethod((connectionString, containerName) =>
        {
            return new BlobContainerClientMock(connectionString, containerName);
        });
        var controller = await _fixture.Root.CreateControllerAsync(
            name: "AzureBlobStorageController",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.Controller.BlobStorageController, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"1.0.0\",\"Account Name\":\"iotsolution1\",\"Access Key\":\"YMktKCsVW7tZrnFKLqFRD8MRICu3hNXxaNTB9Ejr/XyTnM30Eimpy6JvHDNWubcj\",\"Use Https\":true,\"Endpoint Suffix\":\"core.windows.net\"}",
            token: cts.Token);
        var sut = await controller.CreateFileAsync(
            name: "BlobFile",
            typeName: typeName,
            option: "{\"@Version\":\"1.0.0\",\"Container Name\":\"containerName\",\"Blob Path\":\"hoge.txt\"}",
            token: cts.Token);
        await sut.OpenAsync(cts.Token);

        // act
        var actual = await sut.CanWriteAsync(cts.Token);

        // assert
        Assert.False(actual);

        await sut.CloseAsync(cts.Token);
        await sut.DeleteAsync(cts.Token);
        await controller.DeleteAsync(cts.Token);
    }

    [Theory]
    [Trait("Category", "BlockAndAppendBlobFile")]
    [InlineData("GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.BlockBlobFile, GeoLibrary.ORiN3.Provider.Azure.Storage")]
    [InlineData("GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.AppendBlobFile, GeoLibrary.ORiN3.Provider.Azure.Storage")]
    public async Task FileCanWriteBeforeOpenTest(string typeName)
    {
        // arrange
        using var cts = new CancellationTokenSource(10000);
        using var methodReverter = BlobContainerClientEx.SetCreateMethod((connectionString, containerName) =>
        {
            return new BlobContainerClientMock(connectionString, containerName);
        });
        var controller = await _fixture.Root.CreateControllerAsync(
            name: "AzureBlobStorageController",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.Controller.BlobStorageController, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"1.0.0\",\"Account Name\":\"iotsolution1\",\"Access Key\":\"YMktKCsVW7tZrnFKLqFRD8MRICu3hNXxaNTB9Ejr/XyTnM30Eimpy6JvHDNWubcj\",\"Use Https\":true,\"Endpoint Suffix\":\"core.windows.net\"}",
            token: cts.Token);
        var sut = await controller.CreateFileAsync(
            name: "BlobFile",
            typeName: typeName,
            option: "{\"@Version\":\"1.0.0\",\"Container Name\":\"containerName\",\"Blob Path\":\"hoge.txt\"}",
            token: cts.Token);

        // act
        var actual = await Assert.ThrowsAsync<ProviderClientException>(async () =>
        {
            _ = await sut.CanWriteAsync(cts.Token);
        });

        // assert
        Assert.Equal((int)ResultCode.FileNotOpened, (int)actual.ResultCode);

        await sut.CloseAsync(cts.Token);
        await sut.DeleteAsync(cts.Token);
        await controller.DeleteAsync(cts.Token);
    }

    [Theory]
    [Trait("Category", "BlockAndAppendBlobFile")]
    [InlineData("GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.BlockBlobFile, GeoLibrary.ORiN3.Provider.Azure.Storage")]
    [InlineData("GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.AppendBlobFile, GeoLibrary.ORiN3.Provider.Azure.Storage")]
    public async Task FileReadTest(string typeName)
    {
        // arrange
        using var cts = new CancellationTokenSource(10000);
        using var methodReverter = BlobContainerClientEx.SetCreateMethod((connectionString, containerName) =>
        {
            return new BlobContainerClientMock(connectionString, containerName);
        });
        var controller = await _fixture.Root.CreateControllerAsync(
            name: "AzureBlobStorageController",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.Controller.BlobStorageController, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"1.0.0\",\"Account Name\":\"iotsolution1\",\"Access Key\":\"YMktKCsVW7tZrnFKLqFRD8MRICu3hNXxaNTB9Ejr/XyTnM30Eimpy6JvHDNWubcj\",\"Use Https\":true,\"Endpoint Suffix\":\"core.windows.net\"}",
            token: cts.Token);
        var sut = await controller.CreateFileAsync(
            name: "BlobFile",
            typeName: typeName,
            option: "{\"@Version\":\"1.0.0\",\"Container Name\":\"containerName\",\"Blob Path\":\"hoge.txt\"}",
            token: cts.Token);
        await sut.OpenAsync(cts.Token);

        // act
        var actualBytes = new byte[3];
        var length = await sut.ReadAsync(actualBytes, cts.Token);
        _ = await sut.SeekAsync(-2, ORiN3FileSeekOrigin.Current, cts.Token);
        var actualBytes2 = new byte[1];
        var length2 = await sut.ReadAsync(actualBytes2, cts.Token);
        var actualBytes3 = Array.Empty<byte>();
        var length3 = await sut.ReadAsync(actualBytes3, cts.Token);
        _ = await sut.SeekAsync(0, ORiN3FileSeekOrigin.Begin, cts.Token);
        var actualBytes4 = new byte[4];
        var length4 = await sut.ReadAsync(actualBytes4, cts.Token);

        // assert
        Assert.Equal(new byte[] { 1, 2, 3 }, actualBytes);
        Assert.Equal(3, length);
        Assert.Equal(new byte[] { 2 }, actualBytes2);
        Assert.Equal(1, length2);
        Assert.Equal([], actualBytes3);
        Assert.Equal(0, length3);
        Assert.Equal(new byte[] { 1, 2, 3, 0 }, actualBytes4);
        Assert.Equal(3, length4);

        await sut.CloseAsync(cts.Token);
        await sut.DeleteAsync(cts.Token);
        await controller.DeleteAsync(cts.Token);
    }

    [Theory]
    [Trait("Category", "BlockAndAppendBlobFile")]
    [InlineData("GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.BlockBlobFile, GeoLibrary.ORiN3.Provider.Azure.Storage")]
    [InlineData("GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.AppendBlobFile, GeoLibrary.ORiN3.Provider.Azure.Storage")]
    public async Task FileReadBeforeOpenTest(string typeName)
    {
        // arrange
        using var cts = new CancellationTokenSource(10000);
        using var methodReverter = BlobContainerClientEx.SetCreateMethod((connectionString, containerName) =>
        {
            return new BlobContainerClientMock(connectionString, containerName);
        });
        var controller = await _fixture.Root.CreateControllerAsync(
            name: "AzureBlobStorageController",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.Controller.BlobStorageController, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"1.0.0\",\"Account Name\":\"iotsolution1\",\"Access Key\":\"YMktKCsVW7tZrnFKLqFRD8MRICu3hNXxaNTB9Ejr/XyTnM30Eimpy6JvHDNWubcj\",\"Use Https\":true,\"Endpoint Suffix\":\"core.windows.net\"}",
            token: cts.Token);
        var sut = await controller.CreateFileAsync(
            name: "BlobFile",
            typeName: typeName,
            option: "{\"@Version\":\"1.0.0\",\"Container Name\":\"containerName\",\"Blob Path\":\"hoge.txt\"}",
            token: cts.Token);

        // act
        var actual = await Assert.ThrowsAsync<ProviderClientException>(async () =>
        {
            var actualBytes = new byte[3];
            _ = await sut.ReadAsync(actualBytes, cts.Token);
        });

        // assert
        Assert.Equal((int)ResultCode.FileNotOpened, (int)actual.ResultCode);

        await sut.CloseAsync(cts.Token);
        await sut.DeleteAsync(cts.Token);
        await controller.DeleteAsync(cts.Token);
    }

    [Theory]
    [Trait("Category", "BlockAndAppendBlobFile")]
    [InlineData("GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.BlockBlobFile, GeoLibrary.ORiN3.Provider.Azure.Storage")]
    [InlineData("GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.AppendBlobFile, GeoLibrary.ORiN3.Provider.Azure.Storage")]
    public async Task FileWriteTest(string typeName)
    {
        // arrange
        using var cts = new CancellationTokenSource(10000);
        using var methodReverter = BlobContainerClientEx.SetCreateMethod((connectionString, containerName) =>
        {
            return new BlobContainerClientMock(connectionString, containerName);
        });
        var controller = await _fixture.Root.CreateControllerAsync(
            name: "AzureBlobStorageController",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.Controller.BlobStorageController, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"1.0.0\",\"Account Name\":\"iotsolution1\",\"Access Key\":\"YMktKCsVW7tZrnFKLqFRD8MRICu3hNXxaNTB9Ejr/XyTnM30Eimpy6JvHDNWubcj\",\"Use Https\":true,\"Endpoint Suffix\":\"core.windows.net\"}",
            token: cts.Token);
        var sut = await controller.CreateFileAsync(
            name: "BlobFile",
            typeName: typeName,
            option: "{\"@Version\":\"1.0.0\",\"Container Name\":\"containerName\",\"Blob Path\":\"hoge.txt\"}",
            token: cts.Token);
        await sut.OpenAsync(cts.Token);

        // act
        var actual = await Assert.ThrowsAsync<ProviderClientException>(async () =>
        {
            await sut.WriteAsync(new byte[] { 1, 2, 3 }, cts.Token);
        });

        // assert
        Assert.Equal((int)AzureStorageProviderResultCode.BlobNotWritable, (int)actual.ResultCode);

        await sut.CloseAsync(cts.Token);
        await sut.DeleteAsync(cts.Token);
        await controller.DeleteAsync(cts.Token);
    }

    [Theory]
    [Trait("Category", "BlockAndAppendBlobFile")]
    [InlineData("GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.BlockBlobFile, GeoLibrary.ORiN3.Provider.Azure.Storage")]
    [InlineData("GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.AppendBlobFile, GeoLibrary.ORiN3.Provider.Azure.Storage")]
    public async Task FileWriteBeforeOpenTest(string typeName)
    {
        // arrange
        using var cts = new CancellationTokenSource(10000);
        using var methodReverter = BlobContainerClientEx.SetCreateMethod((connectionString, containerName) =>
        {
            return new BlobContainerClientMock(connectionString, containerName);
        });
        var controller = await _fixture.Root.CreateControllerAsync(
            name: "AzureBlobStorageController",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.Controller.BlobStorageController, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"1.0.0\",\"Account Name\":\"iotsolution1\",\"Access Key\":\"YMktKCsVW7tZrnFKLqFRD8MRICu3hNXxaNTB9Ejr/XyTnM30Eimpy6JvHDNWubcj\",\"Use Https\":true,\"Endpoint Suffix\":\"core.windows.net\"}",
            token: cts.Token);
        var sut = await controller.CreateFileAsync(
            name: "BlobFile",
            typeName: typeName,
            option: "{\"@Version\":\"1.0.0\",\"Container Name\":\"containerName\",\"Blob Path\":\"hoge.txt\"}",
            token: cts.Token);

        // act
        var actual = await Assert.ThrowsAsync<ProviderClientException>(async () =>
        {
            await sut.WriteAsync(new byte[] { 1, 2, 3 }, cts.Token);
        });

        // assert
        Assert.Equal((int)ResultCode.FileNotOpened, (int)actual.ResultCode);

        await sut.CloseAsync(cts.Token);
        await sut.DeleteAsync(cts.Token);
        await controller.DeleteAsync(cts.Token);
    }

    [Theory]
    [Trait("Category", "BlockAndAppendBlobFile")]
    [InlineData(true, "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.BlockBlobFile, GeoLibrary.ORiN3.Provider.Azure.Storage")]
    [InlineData(false, "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.AppendBlobFile, GeoLibrary.ORiN3.Provider.Azure.Storage")]
    public async Task FileGetPropertiesTest(bool isBlobkBlob, string typeName)
    {
        // arrange
        var lastModified = new DateTimeOffset(DateTime.Now);
        var createdOn = new DateTimeOffset(DateTime.Now);
        var eTag = new ETag(Guid.NewGuid().ToString());
        using var cts = new CancellationTokenSource(10000);
        using var methodReverter = BlobContainerClientEx.SetCreateMethod((connectionString, containerName) =>
        {
            return new BlobContainerClientMock(connectionString, containerName)
            {
                GetBlockBlobClientMock = (blobName) =>
                {
                    return new BlockBlobClientMock(blobName, true)
                    {
                        GetPropertiesAsyncMock = (token) =>
                        {
                            var info = BlobsModelFactory.BlobProperties(
                                contentLength: 123L,
                                contentType: "txt",
                                lastModified: lastModified,
                                createdOn: createdOn,
                                accessTier: AccessTier.Archive.ToString(),
                                isServerEncrypted: false,
                                eTag: eTag,
                                metadata: new Dictionary<string, string>() { { "A", "a" }, { "B", "b" } });
                            return Task.FromResult(Response.FromValue(info, null!));
                        },
                    };
                },
                GetAppendBlobClientMock = (blobName) =>
                {
                    return new AppendBlobClientMock(blobName, true)
                    {
                        GetPropertiesAsyncMock = (token) =>
                        {
                            var info = BlobsModelFactory.BlobProperties(
                                contentLength: 456L,
                                contentType: "jpeg",
                                lastModified: lastModified,
                                createdOn: createdOn,
                                accessTier: AccessTier.Cold.ToString(),
                                isServerEncrypted: true,
                                eTag: eTag,
                                metadata: null);
                            return Task.FromResult(Response.FromValue(info, null!));
                        },
                    };
                },
            };
        });
        var controller = await _fixture.Root.CreateControllerAsync(
            name: "AzureBlobStorageController",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.Controller.BlobStorageController, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"1.0.0\",\"Account Name\":\"iotsolution1\",\"Access Key\":\"YMktKCsVW7tZrnFKLqFRD8MRICu3hNXxaNTB9Ejr/XyTnM30Eimpy6JvHDNWubcj\",\"Use Https\":true,\"Endpoint Suffix\":\"core.windows.net\"}",
            token: cts.Token);
        var sut = await controller.CreateFileAsync(
            name: "BlobFile",
            typeName: typeName,
            option: "{\"@Version\":\"1.0.0\",\"Container Name\":\"containerName\",\"Blob Path\":\"hoge.txt\"}",
            token: cts.Token);
        await sut.OpenAsync(cts.Token);

        // act
        var actual = await sut.ExecuteAsync("GetProperties", new Dictionary<string, object?>(), cts.Token);

        // assert
        Assert.Equal(0, actual["Result"]);
        Assert.Equal("hoge.txt", actual["Blob Path"]);
        Assert.Equal(isBlobkBlob ? 123L : 456L, actual["Content Length"]);
        Assert.Equal(isBlobkBlob ? "txt" : "jpeg", actual["Content Type"]);
        Assert.Equal(lastModified.UtcDateTime, actual["Last Modified"]);
        Assert.Equal(createdOn.UtcDateTime, actual["Created On"]);
        Assert.Equal(isBlobkBlob, actual["Archived"]);
        Assert.Equal(!isBlobkBlob, actual["Server Encrypted"]);
        Assert.Equal(eTag.ToString(), actual["ETag"]);
        Assert.Equal(isBlobkBlob ?  JsonSerializer.Serialize(new Dictionary<string, string>() { { "A", "a" }, { "B", "b" } }) : null, actual["Custom Metadata"]);

        await sut.CloseAsync(cts.Token);
        await sut.DeleteAsync(cts.Token);
        await controller.DeleteAsync(cts.Token);
    }

    [Theory]
    [Trait("Category", "BlockAndAppendBlobFile")]
    [InlineData("GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.BlockBlobFile, GeoLibrary.ORiN3.Provider.Azure.Storage")]
    [InlineData("GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.File.AppendBlobFile, GeoLibrary.ORiN3.Provider.Azure.Storage")]
    public async Task FileGetPropertiesBeforeOpenTest(string typeName)
    {
        // arrange
        using var cts = new CancellationTokenSource(10000);
        using var methodReverter = BlobContainerClientEx.SetCreateMethod((connectionString, containerName) =>
        {
            return new BlobContainerClientMock(connectionString, containerName);
        });
        var controller = await _fixture.Root.CreateControllerAsync(
            name: "AzureBlobStorageController",
            typeName: "GeoLibrary.ORiN3.Provider.Azure.Storage.O3Object.Controller.BlobStorageController, GeoLibrary.ORiN3.Provider.Azure.Storage",
            option: "{\"@Version\":\"1.0.0\",\"Account Name\":\"iotsolution1\",\"Access Key\":\"YMktKCsVW7tZrnFKLqFRD8MRICu3hNXxaNTB9Ejr/XyTnM30Eimpy6JvHDNWubcj\",\"Use Https\":true,\"Endpoint Suffix\":\"core.windows.net\"}",
            token: cts.Token);
        var sut = await controller.CreateFileAsync(
            name: "BlobFile",
            typeName: typeName,
            option: "{\"@Version\":\"1.0.0\",\"Container Name\":\"containerName\",\"Blob Path\":\"hoge.txt\"}",
            token: cts.Token);

        // act
        var actual = await Assert.ThrowsAsync<ProviderClientException>(async () =>
        {
            await sut.ExecuteAsync("GetProperties", new Dictionary<string, object?>(), cts.Token);
        });

        // assert
        Assert.Equal((int)ResultCode.FileNotOpened, (int)actual.ResultCode);

        await sut.CloseAsync(cts.Token);
        await sut.DeleteAsync(cts.Token);
        await controller.DeleteAsync(cts.Token);
    }
}
